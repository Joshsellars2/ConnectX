// Generated by CoffeeScript 1.6.3
(function() {
  var Board, Cell, animate, board, count, graphics, renderer, stage, thing;

  Cell = (function() {
    function Cell(row, col) {
      this.row = row;
      this.col = col;
      this.player = null;
    }

    return Cell;

  })();

  Board = (function() {
    function Board(rowCount, colCount) {
      var col, row;
      this.rowCount = rowCount;
      this.colCount = colCount;
      this.cells = (function() {
        var _i, _results;
        _results = [];
        for (row = _i = 0; 0 <= rowCount ? _i < rowCount : _i > rowCount; row = 0 <= rowCount ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (col = _j = 0; 0 <= colCount ? _j < colCount : _j > colCount; col = 0 <= colCount ? ++_j : --_j) {
              _results1.push(new Cell(row, col));
            }
            return _results1;
          })());
        }
        return _results;
      })();
    }

    return Board;

  })();

  board = new Board(6, 7);

  board.cells[0][3].player = 1;

  stage = new PIXI.Stage(0xFFFFFF, true);

  stage.setInteractive(true);

  renderer = PIXI.autoDetectRenderer(620, 380);

  renderer.view.style.display = "block";

  document.body.appendChild(renderer.view);

  graphics = new PIXI.Graphics();

  stage.addChild(graphics);

  thing = new PIXI.Graphics();

  stage.addChild(thing);

  thing.position.x = 0;

  thing.position.y = 0;

  count = 0;

  stage.click = stage.tap = function() {
    graphics.lineStyle(Math.random() * 30, Math.random() * 0xFFFFFF, 1);
    graphics.moveTo(Math.random() * 620, Math.random() * 380);
    return graphics.lineTo(Math.random() * 620, Math.random() * 380);
  };

  animate = function() {
    var drawCheckers, drawGrid, getColLeft, getColRight, getRowBottom, getRowTop, height, width;
    thing.clear();
    thing.lineStyle(3, 0xff0000, 1);
    thing.beginFill(0xffFF00, 0.5);
    width = 40;
    height = 40;
    getRowTop = function(row) {
      return height * board.rowCount - height * (row - 1);
    };
    getRowBottom = function(row) {
      return height * board.rowCount - height * row;
    };
    getColLeft = function(col) {
      return width * col;
    };
    getColRight = function(col) {
      return width * (col + 1);
    };
    drawGrid = function() {
      var col, colXLeft, colXRight, row, rowYBottom, rowYTop, _i, _j, _ref, _ref1, _results;
      for (row = _i = 0, _ref = board.rowCount; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        rowYTop = getRowTop(row);
        rowYBottom = getRowBottom(row);
        thing.lineStyle(3, 0xff0000, 1);
        thing.moveTo(getColLeft(0), rowYTop);
        thing.lineTo(getColRight(board.colCount - 1), rowYTop);
        thing.lineStyle(2, 0x0000ff, 1);
        thing.moveTo(getColLeft(0), rowYBottom);
        thing.lineTo(getColRight(board.colCount - 1), rowYBottom);
      }
      _results = [];
      for (col = _j = 0, _ref1 = board.colCount; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
        colXLeft = getColLeft(col);
        colXRight = getColRight(col);
        thing.lineStyle(2, 0x00FFff, 1);
        thing.moveTo(colXLeft, getRowTop(0));
        thing.lineTo(colXLeft, getRowBottom(board.rowCount - 1));
        thing.lineStyle(1, 0x00FF00, 1);
        thing.moveTo(colXRight, getRowTop(0));
        _results.push(thing.lineTo(colXRight, getRowBottom(board.rowCount - 1)));
      }
      return _results;
    };
    drawCheckers = function() {
      var cell, centerX, centerY, col, colXLeft, colXRight, row, rowYBottom, rowYTop, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = board.rowCount; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = board.colCount; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            cell = board.cells[row][col];
            if (cell.player > 0) {
              rowYTop = getRowTop(row);
              rowYBottom = getRowBottom(row);
              colXLeft = getColLeft(col);
              colXRight = getColRight(col);
              centerX = (colXLeft + colXRight) / 2;
              centerY = (rowYTop + rowYBottom) / 2;
              thing.lineStyle(2, 0x000000, 1);
              _results1.push(thing.drawCircle(centerX, centerY, width / 3));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    drawGrid();
    drawCheckers();
    thing.moveTo(-120 + Math.sin(count * 20, -100 + Math.cos(count * 20)));
    thing.rotation = count * 0.1;
    renderer.render(stage);
    return requestAnimFrame(animate);
  };

  requestAnimFrame(animate);

}).call(this);

/*
//@ sourceMappingURL=game.map
*/
